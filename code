<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Calcium Carbonate and Hydrochloric Acid Reaction Simulation</title>
  <style>
    /************************************************
     * 1) OVERALL COLOR & TYPOGRAPHY               *
     ************************************************/
    body {
      margin: 0;
      padding: 0;
      font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
      background: linear-gradient(120deg, #E6F7FF, #FFF8E6 70%);
      color: #333;
    }
    .main-container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    h1 {
      text-align: center;
      margin-bottom: 20px;
      font-weight: 600;
      color: #1E90FF; /* bright blue title */
    }

    /************************************************
     * 2) SIMULATION & GRAPH LAYOUT                *
     ************************************************/
    .simulation-container {
      display: flex;
      gap: 30px;
      align-items: stretch; /* Ensures both sections match the tallest section’s height */
      margin-bottom: 20px;
    }
    .left-section {
      width: 500px;
      display: flex;
      flex-direction: column;
    }
    .apparatus-image {
      margin-bottom: 1rem;
    }
    .simulation-container canvas {
      border: none;
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
      background-color: #ffffff;
      transition: box-shadow 0.2s ease;
    }
    .simulation-container canvas:hover {
      box-shadow: 0 6px 16px rgba(0, 0, 0, 0.2);
    }
    .graph-container {
      display: flex;
      flex-direction: row;
      align-items: stretch; /* Stretches contents to match container height */
    }
    .graph-container canvas {
      flex: 1; /* Takes available width minus legend */
    }
    #legend {
      margin-left: 10px; /* Space between graph and legend */
      display: flex;
      flex-direction: column;
      justify-content: center; /* Centers legend vertically */
    }

    /************************************************
     * 3) CONTROLS & BUTTONS                       *
     ************************************************/
    .controls {
      display: flex;
      flex-direction: column;
      gap: 20px;
      margin-top: 20px;
    }
    .sliders-horizontal {
      display: flex;
      gap: 20px;
      flex-wrap: wrap;
      justify-content: center;
    }
    .slider-box {
      display: flex;
      align-items: center;
      gap: 10px;
      background-color: #ffffff;
      padding: 10px 15px;
      border: 1px solid #ccc;
      border-radius: 6px;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
      min-width: 300px;
      transition: transform 0.2s ease;
    }
    .slider-box:hover {
      transform: translateY(-2px);
    }
    .icon {
      width: 100px;
      height: 40px;
      flex-shrink: 0;
    }
    .slider-box label {
      font-size: 14px;
      font-weight: 600;
      color: #444;
      margin: 0;
    }
    input[type="range"] {
      cursor: pointer;
      width: 100%;
      margin: 0;
      background: transparent;
      -webkit-appearance: none;
    }
    input[type="range"]::-webkit-slider-runnable-track {
      height: 6px;
      border-radius: 3px;
      background: #d1d1d1;
    }
    input[type="range"]::-webkit-slider-thumb {
      -webkit-appearance: none;
      height: 16px;
      width: 16px;
      margin-top: -5px;
      border-radius: 50%;
      background: #FF8C00;
      border: 2px solid #fff;
      box-shadow: 0 0 2px rgba(0,0,0,0.3);
    }
    input[type="range"]:focus {
      outline: none;
    }
    .button-group {
      width: 100%;
      display: flex;
      justify-content: center;
      gap: 10px;
      flex-wrap: wrap;
    }
    button {
      padding: 10px 20px;
      font-size: 14px;
      font-weight: 600;
      background-color: #FF8C00;
      color: #ffffff;
      border: none;
      border-radius: 6px;
      cursor: pointer;
      box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
      transition: background-color 0.2s ease, transform 0.2s ease;
    }
    button:hover {
      background-color: #ff7a00;
      transform: translateY(-2px);
    }
    button:active {
      background-color: #e96f00;
      transform: translateY(0);
    }

    /************************************************
     * 4) RESULTS TABLE                            *
     ************************************************/
    #resultsTable {
      margin-top: 10px;
      border-collapse: collapse;
      width: 100%;
      max-width: 700px;
      margin-left: auto;
      margin-right: auto;
      background-color: #ffffff;
      box-shadow: 0 3px 8px rgba(0,0,0,0.1);
    }
    #resultsTable th, #resultsTable td {
      border: 1px solid #ccc;
      padding: 8px 10px;
      text-align: center;
      font-size: 14px;
    }
    #resultsTable th {
      background-color: #f0f0f0;
      font-weight: 700;
    }
    #resultsTable tr:hover {
      background-color: #fafafa;
    }
  </style>
</head>
<body>
  <div class="main-container">
    <h1>Calcium Carbonate and Hydrochloric Acid Reaction Simulation</h1>
    <div class="simulation-container">
      <div class="left-section">
        <div class="apparatus-image">
          <img id="apparatusImg" src="https://i.postimg.cc/PrWm6FHN/temp-Imagem-H0-Cmo.avif" 
               alt="Rate of Reaction Apparatus" style="max-width: 500px; height: auto; border: 1px solid #ccc;" />
        </div>
        <canvas id="simulationCanvas" width="500" height="500"></canvas>
      </div>
      <div class="graph-container">
        <canvas id="co2Chart" width="700"></canvas>
        <div id="legend"></div>
      </div>
    </div>
    <div class="controls">
      <div class="sliders-horizontal">
        <div class="slider-box">
          <svg class="icon" id="carbonateIcon"></svg>
          <label for="pieces">
            Pieces of CaCO<sub>3</sub>: <span id="piecesValue">5</span>
          </label>
          <input type="range" id="pieces" min="1" max="5" value="5">
        </div>
        <div class="slider-box">
          <svg class="icon" id="acidIcon"></svg>
          <label for="concentration">
            Concentration of HCl (M): <span id="concentrationValue">1.0</span>
          </label>
          <input type="range" id="concentration" min="0.1" max="2.0" step="0.1" value="1.0">
        </div>
        <div class="slider-box">
          <svg class="icon" id="tempIcon"></svg>
          <label for="temperature">
            Temperature (°C): <span id="temperatureValue">25</span>
          </label>
          <input type="range" id="temperature" min="0" max="100" step="5" value="25">
        </div>
      </div>
      <div class="button-group">
        <button id="start">Start Experiment</button>
        <button id="newTrial">New Trial</button>
        <button id="reset">Reset</button>
        <button id="exportCSV">Export to CSV</button>
      </div>
    </div>
    <table id="resultsTable">
      <thead>
        <tr>
          <th rowspan="2">Time (s)</th>
          <th id="volumeHeading" colspan="1">Volume of CO₂ (cm³)</th>
        </tr>
        <tr id="subheadRow">
          <th id="trialSubhead0"></th>
        </tr>
      </thead>
      <tbody id="resultsBody"></tbody>
    </table>
    <div style="text-align: center; margin-top: 2rem;">
      <img 
        src="https://i.postimg.cc/dtTPJLz1/Start-and-end-screen-Tw-T-Banner.png"
        alt="TwT banner image"
        style="max-width: 500px; height: auto; border: 1px solid #ccc;"
      />
      <div style="font-size: 0.9em; color: #666; margin-top: 1rem;">
        © B. Moran 2025
      </div>
    </div>
  </div>

  <script>
    /************************************************
     * 1) SIMULATION & CHART LOGIC                  *
     ************************************************/
    const canvas = document.getElementById('simulationCanvas');
    const ctx = canvas.getContext('2d');
    const chartCanvas = document.getElementById('co2Chart');
    const chartCtx = chartCanvas.getContext('2d');
    const legendDiv = document.getElementById('legend');
    const resultsBody = document.getElementById('resultsBody');
    const volumeHeading = document.getElementById('volumeHeading');
    const subheadRow = document.getElementById('subheadRow');
    const piecesSlider = document.getElementById('pieces');
    const concentrationSlider = document.getElementById('concentration');
    const temperatureSlider = document.getElementById('temperature');
    const piecesValueDisp = document.getElementById('piecesValue');
    const concValueDisp = document.getElementById('concentrationValue');
    const tempValueDisp = document.getElementById('temperatureValue');
    const CARBONATE_RADIUS = 10;
    const ACID_RADIUS = 5;
    const STEP = 2 * CARBONATE_RADIUS;
    const MAX_CACO3 = 100;
    const timeScale = 30;
    let k;
    let acidParticles = [];
    let calciumCarbonateParticles = [];
    let co2Particles = [];
    let totalCO2_fromCollisions = 0;
    let allTrialsData = [[]];
    let currentTrialIndex = 0;
    let trialHasStarted = [false];
    let isRunning = false;
    let lastTime = 0;
    let simulatedTime = 0;
    let lastRecordedTime = 0;
    /* Updated color array to include more variety (green, red, etc.) */
    const colors = [
      "#FF8C00", // orange
      "#1E90FF", // blue
      "#32CD32", // green
      "#FF0000", // red
      "#FFB84C", // lighter orange
      "#87CEEB", // lighter blue
      "#FFD700", // gold
      "#3399FF"  // bright blue
    ];

    // Dynamically adjust graph height
    function adjustGraphHeight() {
      const leftSection = document.querySelector('.left-section');
      const totalHeight = leftSection.offsetHeight; // Height of apparatus image + simulation canvas
      chartCanvas.height = totalHeight; // Set canvas height attribute
      chartCanvas.style.height = totalHeight + 'px'; // Set CSS height to match
    }

    document.getElementById('apparatusImg').addEventListener('load', () => {
      adjustGraphHeight();
      updateChart(); // Redraw chart with new height
    });

    window.addEventListener('resize', () => {
      adjustGraphHeight();
      updateChart(); // Adjust on window resize
    });

    // Call initially if image is already loaded
    if (document.getElementById('apparatusImg').complete) {
      adjustGraphHeight();
      updateChart();
    }

    // Slider input listeners
    piecesSlider.addEventListener('input', () => {
      piecesValueDisp.textContent = piecesSlider.value;
      updatePiecesIcon(piecesSlider.value);
      if (!isRunning && !trialHasStarted[currentTrialIndex]) {
        setupExperiment();
        draw();
        updateChart();
      }
    });
    concentrationSlider.addEventListener('input', () => {
      const val = parseFloat(concentrationSlider.value).toFixed(1);
      concValueDisp.textContent = val;
      updateConcentrationIcon(parseFloat(val));
      if (!isRunning && !trialHasStarted[currentTrialIndex]) {
        setupExperiment();
        draw();
        updateChart();
      }
    });
    temperatureSlider.addEventListener('input', () => {
      tempValueDisp.textContent = temperatureSlider.value;
      updateTemperatureIcon(parseInt(temperatureSlider.value));
      if (!isRunning && !trialHasStarted[currentTrialIndex]) {
        setupExperiment();
        draw();
        updateChart();
      }
    });

    function resetSimulation() {
      while (resultsBody.rows.length > 0) {
        resultsBody.deleteRow(0);
      }
      volumeHeading.colSpan = 1;
      while (subheadRow.cells.length > 1) {
        subheadRow.deleteCell(-1);
      }
      subheadRow.cells[0].id = "trialSubhead0";
      subheadRow.cells[0].textContent = "";
      allTrialsData = [[]];
      currentTrialIndex = 0;
      trialHasStarted = [false];
      simulatedTime = 0;
      lastRecordedTime = 0;
      totalCO2_fromCollisions = 0;
      isRunning = false;
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      chartCtx.clearRect(0, 0, chartCanvas.width, chartCanvas.height);
      legendDiv.innerHTML = "";
      addTimeZeroRow(0);
      setupExperiment();
      draw();
      updateChart();
      updatePiecesIcon(piecesSlider.value);
      updateConcentrationIcon(parseFloat(concentrationSlider.value));
      updateTemperatureIcon(parseInt(temperatureSlider.value));
    }

    function newTrial() {
      currentTrialIndex++;
      allTrialsData.push([]);
      trialHasStarted.push(false);
      volumeHeading.colSpan = currentTrialIndex + 1;
      const newTh = document.createElement('th');
      newTh.id = "trialSubhead" + currentTrialIndex;
      newTh.textContent = "";
      subheadRow.appendChild(newTh);
      simulatedTime = 0;
      lastRecordedTime = 0;
      totalCO2_fromCollisions = 0;
      isRunning = false;
      addTimeZeroRow(currentTrialIndex);
      setupExperiment();
      draw();
      updateChart();
    }

    function addTimeZeroRow(trialIdx) {
      allTrialsData[trialIdx].push({ time: 0, volume: "0.0" });
      let row = resultsBody.rows[0];
      if (!row) {
        row = resultsBody.insertRow();
        row.insertCell(0).textContent = "0";
      } else if (row.cells[0].textContent !== "0") {
        row.cells[0].textContent = "0";
      }
      while (row.cells.length < trialIdx + 2) {
        row.insertCell();
      }
      row.cells[trialIdx + 1].textContent = "0.0";
    }

    function startExperiment() {
      if (trialHasStarted[currentTrialIndex]) {
        console.log("This trial is already started/finalized. Press 'New Trial' to begin a new one.");
        return;
      }
      trialHasStarted[currentTrialIndex] = true;
      if (!isRunning) {
        buildCarbonateGrid();
        initAcidParticles();
        computeRateConstant();
        const pieces = parseInt(piecesSlider.value);
        const conc = parseFloat(concentrationSlider.value).toFixed(1);
        const temp = parseInt(temperatureSlider.value);
        const subheadCell = document.getElementById("trialSubhead" + currentTrialIndex);
        if (subheadCell) {
          subheadCell.innerHTML = `Trial ${currentTrialIndex + 1}<br>(${pieces} pieces of CaCO<sub>3</sub>, ${conc} M, ${temp}°C)`;
        }
        isRunning = true;
        lastTime = performance.now();
      }
    }

    function setupExperiment() {
      buildCarbonateGrid();
      initAcidParticles();
      computeRateConstant();
    }

    function buildCarbonateGrid() {
      calciumCarbonateParticles = [];
      const pieces = parseInt(piecesSlider.value);
      const totalParticles = MAX_CACO3;
      const particlesPerPiece = Math.ceil(totalParticles / pieces);
      const rows = Math.ceil(Math.sqrt(particlesPerPiece));
      const cols = Math.ceil(particlesPerPiece / rows);
      const pieceWidth = cols * STEP;
      const GAP = 20;
      const totalWidth = pieces * pieceWidth + (pieces - 1) * GAP;
      const startX = (canvas.width - totalWidth) / 2;
      const bottomY = canvas.height - 10;
      let assigned = 0;
      for (let p = 0; p < pieces; p++) {
        const pieceX = startX + p * (pieceWidth + GAP);
        const pieceYTop = bottomY - rows * STEP;
        for (let i = rows - 1; i >= 0; i--) {
          for (let j = 0; j < cols; j++) {
            if (assigned >= totalParticles) break;
            const xPos = pieceX + j * STEP + CARBONATE_RADIUS;
            const yPos = pieceYTop + i * STEP + CARBONATE_RADIUS;
            calciumCarbonateParticles.push({ x: xPos, y: yPos, mass: 1.0 });
            assigned++;
          }
        }
      }
    }

    function initAcidParticles() {
      acidParticles = [];
      co2Particles = [];
      const conc = parseFloat(concentrationSlider.value);
      const temp = parseInt(temperatureSlider.value);
      const numParticles = Math.round(50 * conc);
      const maxV = 100 / timeScale;
      const speedFactor = 1 + (temp - 25) / 80;
      for (let i = 0; i < numParticles; i++) {
        let attempt = 0, foundSpot = false;
        let x, y;
        while (attempt < 50 && !foundSpot) {
          x = Math.random() * canvas.width;
          y = Math.random() * (canvas.height - 50);
          if (!isInsideAnyCarbonate(x, y, ACID_RADIUS)) {
            foundSpot = true;
          } else attempt++;
        }
        if (!foundSpot) { x = 0; y = 0; }
        const vx = (Math.random() - 0.5) * 2 * maxV * speedFactor;
        const vy = (Math.random() - 0.5) * 2 * maxV * speedFactor;
        acidParticles.push({ x, y, vx, vy });
      }
    }

    function computeRateConstant() {
      const pieces = parseInt(piecesSlider.value);
      const conc = parseFloat(concentrationSlider.value);
      const temp = parseInt(temperatureSlider.value);
      k = 0.01 * (conc / 1.0) * (1 + (temp - 25) / 80) * (pieces / 5);
    }

    function isInsideAnyCarbonate(ax, ay, r) {
      const sumR = r + CARBONATE_RADIUS;
      const sumR2 = sumR * sumR;
      for (let c of calciumCarbonateParticles) {
        const dx = ax - c.x, dy = ay - c.y;
        if (dx * dx + dy * dy < sumR2) return true;
      }
      return false;
    }

    function animate(currentTime) {
      if (isRunning) {
        const deltaTime = (currentTime - lastTime) / 1000;
        lastTime = currentTime;
        update(deltaTime);
        draw();
      }
      requestAnimationFrame(animate);
    }

    function update(deltaTime) {
      const simDelta = deltaTime * timeScale;
      simulatedTime += simDelta;
      while (lastRecordedTime + 10 <= 300 && simulatedTime >= lastRecordedTime + 10) {
        lastRecordedTime += 10;
        const timeBased = 100 * (1 - Math.exp(-k * lastRecordedTime));
        const measured = (timeBased + totalCO2_fromCollisions).toFixed(1);
        recordDataPoint(lastRecordedTime, measured);
      }
      moveAcidWithCollisions(simDelta);
      co2Particles.forEach(b => { b.y += b.vy * deltaTime; });
      co2Particles = co2Particles.filter(b => b.y > -20);
      if (lastRecordedTime >= 300) {
        isRunning = false;
      }
    }

    function moveAcidWithCollisions(simDelta) {
      for (let a of acidParticles) {
        a.x += a.vx * simDelta;
        a.y += a.vy * simDelta;
        if (a.x < ACID_RADIUS) { a.x = ACID_RADIUS; a.vx = -a.vx; }
        if (a.x > canvas.width - ACID_RADIUS) { a.x = canvas.width - ACID_RADIUS; a.vx = -a.vx; }
        if (a.y < ACID_RADIUS) { a.y = ACID_RADIUS; a.vy = -a.vy; }
        if (a.y > canvas.height - ACID_RADIUS) { a.y = canvas.height - ACID_RADIUS; a.vy = -a.vy; }
        for (let i = calciumCarbonateParticles.length - 1; i >= 0; i--) {
          const c = calciumCarbonateParticles[i];
          const dx = a.x - c.x, dy = a.y - c.y;
          const distSq = dx * dx + dy * dy;
          const sumR = ACID_RADIUS + CARBONATE_RADIUS;
          if (distSq < sumR * sumR) {
            const dist = Math.sqrt(distSq) || 0.0001;
            const overlap = sumR - dist;
            const nx = dx / dist, ny = dy / dist;
            a.x += nx * overlap; 
            a.y += ny * overlap;
            const vdotn = a.vx * nx + a.vy * ny;
            a.vx -= 2 * vdotn * nx;
            a.vy -= 2 * vdotn * ny;
            c.mass -= 1.4 * simDelta;
            co2Particles.push({ x: a.x, y: a.y, vy: -80 });
            if (c.mass <= 0) {
              calciumCarbonateParticles.splice(i, 1);
              totalCO2_fromCollisions++;
            }
          }
        }
      }
    }

    function draw() {
      ctx.clearRect(0, 0, canvas.width, canvas.height);
      calciumCarbonateParticles.forEach(c => {
        const alpha = Math.max(0, c.mass);
        const gradient = ctx.createRadialGradient(c.x, c.y, 0, c.x, c.y, CARBONATE_RADIUS);
        gradient.addColorStop(0, `rgba(200,200,200,${alpha})`);
        gradient.addColorStop(1, `rgba(100,100,100,${alpha})`);
        ctx.fillStyle = gradient;
        ctx.beginPath();
        ctx.arc(c.x, c.y, CARBONATE_RADIUS, 0, 2 * Math.PI);
        ctx.fill();
      });
      ctx.fillStyle = 'red';
      acidParticles.forEach(a => {
        ctx.beginPath();
        ctx.arc(a.x, a.y, ACID_RADIUS, 0, 2 * Math.PI);
        ctx.fill();
      });
      ctx.fillStyle = 'rgba(0,0,255,0.5)';
      co2Particles.forEach(b => {
        ctx.beginPath();
        ctx.arc(b.x, b.y, 3, 0, 2 * Math.PI);
        ctx.fill();
      });
    }

    function recordDataPoint(timeSec, volume) {
      allTrialsData[currentTrialIndex].push({ time: timeSec, volume: volume });
      updateTable(timeSec, volume, currentTrialIndex);
      updateChart();
      updateLegend();
    }

    function updateTable(timeSec, volume, trialIdx) {
      const rowIndex = timeSec / 10;
      let row = resultsBody.rows[rowIndex];
      if (!row) {
        row = resultsBody.insertRow(rowIndex);
        row.insertCell(0).textContent = timeSec.toString();
      } else {
        if (row.cells[0].textContent !== timeSec.toString()) {
          row.cells[0].textContent = timeSec.toString();
        }
      }
      while (row.cells.length < trialIdx + 2) {
        row.insertCell();
      }
      row.cells[trialIdx + 1].textContent = volume;
    }

    function updateChart() {
      chartCtx.clearRect(0, 0, chartCanvas.width, chartCanvas.height);
      const w = chartCanvas.width, h = chartCanvas.height;
      const marginLeft = 40, marginRight = 10, marginTop = 20, marginBottom = 35;
      const plotW = w - marginLeft - marginRight;
      const plotH = h - marginTop - marginBottom;
      let dataMax = 0;
      allTrialsData.forEach(trialData => {
        trialData.forEach(pt => {
          const v = parseFloat(pt.volume) || 0;
          if (v > dataMax) dataMax = v;
        });
      });
      let maxVolume = Math.max(200, dataMax);
      maxVolume = Math.ceil(maxVolume / 25) * 25;
      chartCtx.lineWidth = 2;
      chartCtx.strokeStyle = "black";
      chartCtx.beginPath();
      chartCtx.moveTo(marginLeft, marginTop);
      chartCtx.lineTo(marginLeft, h - marginBottom);
      chartCtx.lineTo(w - marginRight, h - marginBottom);
      chartCtx.stroke();
      chartCtx.lineWidth = 1;
      chartCtx.strokeStyle = "#e0e0e0";
      for (let t = 50; t < 300; t += 50) {
        const x = marginLeft + (t / 300) * plotW;
        chartCtx.beginPath();
        chartCtx.moveTo(x, marginTop);
        chartCtx.lineTo(x, h - marginBottom);
        chartCtx.stroke();
      }
      for (let v = 25; v < maxVolume; v += 25) {
        const y = h - marginBottom - (v / maxVolume) * plotH;
        chartCtx.beginPath();
        chartCtx.moveTo(marginLeft, y);
        chartCtx.lineTo(w - marginRight, y);
        chartCtx.stroke();
      }
      chartCtx.fillStyle = "black";
      chartCtx.font = "bold 14px 'Segoe UI'";
      chartCtx.textAlign = "center";
      chartCtx.fillText("Time (s)", marginLeft + plotW / 2, h - 4);
      chartCtx.save();
      chartCtx.translate(10, marginTop + plotH / 2);
      chartCtx.rotate(-Math.PI / 2);
      chartCtx.fillText("Volume of CO₂ (cm³)", 0, 0);
      chartCtx.restore();
      chartCtx.font = "12px 'Segoe UI'";
      chartCtx.fillStyle = "#333";
      for (let t = 0; t <= 300; t += 50) {
        const x = marginLeft + (t / 300) * plotW;
        chartCtx.fillText(t, x, h - marginBottom + 18);
      }
      chartCtx.textAlign = "right";
      for (let v = 0; v <= maxVolume; v += 25) {
        const y = h - marginBottom - (v / maxVolume) * plotH;
        chartCtx.fillText(v, marginLeft - 8, y + 4);
      }
      allTrialsData.forEach((trialData, idx) => {
        if (!trialData.length) return;
        chartCtx.beginPath();
        chartCtx.strokeStyle = colors[idx % colors.length];
        const firstPt = trialData[0];
        const t0 = parseFloat(firstPt.time) || 0;
        const vol0 = parseFloat(firstPt.volume) || 0;
        let x0 = marginLeft + (t0 / 300) * plotW;
        let y0 = h - marginBottom - (vol0 / maxVolume) * plotH;
        chartCtx.moveTo(x0, y0);
        for (let i = 1; i < trialData.length; i++) {
          const p = trialData[i];
          const xtime = parseFloat(p.time) || 0;
          const xvol = parseFloat(p.volume) || 0;
          const xx = marginLeft + (xtime / 300) * plotW;
          const yy = h - marginBottom - (xvol / maxVolume) * plotH;
          chartCtx.lineTo(xx, yy);
        }
        chartCtx.stroke();
      });
    }

    function updateLegend() {
      legendDiv.innerHTML = "";
      for (let i = 0; i < allTrialsData.length; i++) {
        const color = colors[i % colors.length];
        const trialLabel = `Trial ${i + 1}`;
        let item = document.createElement("div");
        item.style.marginBottom = "5px";
        let colorBox = document.createElement("span");
        colorBox.style.display = "inline-block";
        colorBox.style.width = "12px";
        colorBox.style.height = "12px";
        colorBox.style.marginRight = "5px";
        colorBox.style.backgroundColor = color;
        item.appendChild(colorBox);
        let textSpan = document.createElement("span");
        textSpan.innerText = trialLabel;
        item.appendChild(textSpan);
        legendDiv.appendChild(item);
      }
    }

    function exportCSV() {
      let csv = "Time (s)";
      const numTrials = allTrialsData.length;
      for (let i = 0; i < numTrials; i++) {
        const th = document.getElementById(`trialSubhead${i}`);
        let headingText = th ? th.innerText : `Trial ${i + 1}`;
        headingText = headingText.replace(/\n/g, " ");
        headingText = headingText.replace(/(CaCO)3/g, "$1₃");
        csv += `,"${headingText}"`;
      }
      csv += "\n";
      csv += "0";
      for (let i = 0; i < numTrials; i++) {
        const dp = allTrialsData[i].find(p => parseFloat(p.time) === 0);
        csv += dp ? `,${dp.volume}` : ",0.0";
      }
      csv += "\n";
      for (let t = 10; t <= 300; t += 10) {
        csv += t;
        for (let i = 0; i < numTrials; i++) {
          const dp = allTrialsData[i].find(p => parseFloat(p.time) === t);
          csv += dp ? `,${dp.volume}` : ",";
        }
        csv += "\n";
      }
      const blob = new Blob([csv], { type: 'text/csv' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = "experiment_data.csv";
      a.click();
    }

    /************************************************
     * 2) DYNAMIC ICON-ANIMATION LOGIC              *
     ************************************************/
    const carbonateIcon = document.getElementById("carbonateIcon");
    const acidIcon = document.getElementById("acidIcon");
    const tempIcon = document.getElementById("tempIcon");

    function updatePiecesIcon(value) {
      while (carbonateIcon.firstChild) {
        carbonateIcon.removeChild(carbonateIcon.firstChild);
      }
      const spacing = 12;
      const radius = 4;
      const startX = 6;
      const centerY = 20;
      for (let i = 0; i < value; i++) {
        const circle = document.createElementNS("http://www.w3.org/2000/svg","circle");
        circle.setAttribute("cx", startX + i * (radius*2 + spacing));
        circle.setAttribute("cy", centerY);
        circle.setAttribute("r", radius);
        circle.setAttribute("fill", "grey");
        circle.style.transition = "all 0.3s";
        carbonateIcon.appendChild(circle);
      }
    }

    function updateConcentrationIcon(concentration) {
      while (acidIcon.firstChild) {
        acidIcon.removeChild(acidIcon.firstChild);
      }
      const numDots = Math.round(concentration / 0.1);
      const radius = 2.5;
      const gap = 6;
      const xStart = 6;
      const yRow1 = 12;
      const yRow2 = 28;
      for (let i = 0; i < numDots; i++) {
        const row = (i < 10) ? 0 : 1;
        const colIndex = (row === 0) ? i : (i - 10);
        const x = xStart + colIndex * (radius*2 + gap);
        const y = (row === 0) ? yRow1 : yRow2;
        const circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
        circle.setAttribute("cx", x);
        circle.setAttribute("cy", y);
        circle.setAttribute("r", radius);
        circle.setAttribute("fill", "red");
        circle.style.transition = "all 0.3s";
        acidIcon.appendChild(circle);
      }
    }

    function updateTemperatureIcon(tempValue) {
      while (tempIcon.firstChild) {
        tempIcon.removeChild(tempIcon.firstChild);
      }
      const rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
      rect.setAttribute("x", "21");
      rect.setAttribute("y", "5");
      rect.setAttribute("width", "8");
      rect.setAttribute("height", "25");
      rect.setAttribute("fill", "none");
      rect.setAttribute("stroke", "black");
      tempIcon.appendChild(rect);
      const bulb = document.createElementNS("http://www.w3.org/2000/svg", "circle");
      bulb.setAttribute("cx", "25");
      bulb.setAttribute("cy", "32");
      bulb.setAttribute("r", "7");
      bulb.setAttribute("fill", "red");
      tempIcon.appendChild(bulb);
      const maxHeight = 25;
      const topY = 30 - (tempValue / 100) * maxHeight;
      const line = document.createElementNS("http://www.w3.org/2000/svg", "line");
      line.setAttribute("x1", "25");
      line.setAttribute("y1", topY);
      line.setAttribute("x2", "25");
      line.setAttribute("y2", "32");
      line.setAttribute("stroke", "red");
      line.setAttribute("stroke-width", "8");
      line.style.transition = "all 0.3s";
      tempIcon.appendChild(line);
    }

    /************************************************
     * 3) INIT & START ANIMATION                   *
     ************************************************/
    document.getElementById('start').addEventListener('click', startExperiment);
    document.getElementById('newTrial').addEventListener('click', newTrial);
    document.getElementById('reset').addEventListener('click', resetSimulation);
    document.getElementById('exportCSV').addEventListener('click', exportCSV);
    resetSimulation();
    requestAnimationFrame(animate);
  </script>
</body>
</html>
